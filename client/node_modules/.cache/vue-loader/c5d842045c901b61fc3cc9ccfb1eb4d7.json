{"remainingRequest":"/home/stylo/new-dir/starter-kit/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/stylo/new-dir/starter-kit/src/views/TechMasterTables.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/stylo/new-dir/starter-kit/src/views/TechMasterTables.vue","mtime":1606161634817},{"path":"/home/stylo/new-dir/starter-kit/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/stylo/new-dir/starter-kit/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/stylo/new-dir/starter-kit/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/stylo/new-dir/starter-kit/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport PathMixins from '../mixins/pathMixins';\n\nexport default {\n  mixins: [PathMixins],\n\n  data() {\n    return {\n      activePrompt: false,\n      editPrompt: false,\n      nameError: true,\n      tagError: true,\n      descriptionError: true,\n      nameSucc: false,\n      tagSucc: false,\n      descriptionSucc: false,\n      response: [],\n      addForm: {\n        name: '',\n        tags: '',\n        description: '',\n      },\n      editForm: {\n        technology_id: null,\n        technology_name: '',\n        tech_dependant_tags: '',\n        stack_description: '',\n      },\n      message: 'Cannot delete entry, technology name used in child table.',\n    };\n  },\n  computed:{\n    validAddPrompt(){\n      if(this.addForm.name.length > 0 && this.addForm.name.length < 50) {\n        this.nameSucc = true;\n        this.nameError = false;\n      } else {\n        this.nameError = true;\n        this.nameSucc = false;\n      }\n      if(this.isValidTag(this.addForm.tags) && this.addForm.tags.length < 2000) {\n        this.tagSucc = true;\n        this.tagError = false;\n      } else {\n        this.tagError = true;\n        this.tagSucc = false;\n      }\n      if(this.addForm.description.length > 0 && this.addForm.description.length < 500) {\n        this.descriptionSucc = true;\n        this.descriptionError = false;\n      } else {\n        this.descriptionError = true;\n        this.descriptionSucc = false;\n      }\n      if(this.descriptionSucc && this.nameSucc && this.tagSucc) {\n        return true;\n      } else {\n        return false;\n      }\n    }, //eofunction\n    validEditPrompt(){\n      if(this.editForm.technology_name.length > 0 && this.editForm.technology_name.length < 50) {\n        this.nameSucc = true;\n        this.nameError = false;\n      } else {\n        this.nameSucc = false;\n        this.nameError = true;\n      }\n      if(this.descriptionSucc && this.nameSucc && this.tagSucc) {\n        return true;\n      }\n      return false;\n\n    }, //eofunction\n  },\n  methods: {\n    isValidTag(tag) {\n      let re = new RegExp('(([\\#])([A-z])+(\\,)*)+');\n      if (tag === '') {\n        return false;\n      }\n      return re.test(tag);\n    },\n    getTech() {\n      const path = this.get_tech_path;\n      axios.get(path)\n        .then((res) => {\n          this.response = res.data.data;\n        })\n        .catch((error) => {\n          // eslint-disable-next-line\n          console.error(error);\n        });\n    },\n    addTech(payload) {\n      const path = this.add_tech_path;\n      axios.post(path, payload)\n        .then((res) => {\n          this.response = res.data.data;\n        })\n        .catch((error) => {\n          console.log(error);\n          this.getTech();\n        });\n    },\n    onSubmit() {\n\n      const payload = {\n        technology_name: this.addForm.name,\n        tech_dependant_tags: this.addForm.tags,\n        stack_description: this.addForm.description,\n      };\n      console.log(payload);\n      this.addTech(payload);\n    },\n    editTech(entry) {\n      this.editPrompt = true;\n      //this.editForm = entry;\n      this.editForm = Object.assign({}, entry);\n    },\n    onSubmitUpdate() {\n      const payload = {\n        technology_id: this.editForm.technology_id,\n        technology_name: this.editForm.name,\n        tech_dependant_tags: this.editForm.tags,\n        stack_description: this.editForm.description,\n      };\n      this.updateTech(payload);\n    },\n    // eslint-disable-next-line\n    updateTech(payload, tech_id) {\n\n      const path = this.update_tech_path; // eslint-disable-line\n      axios.put(path, payload)\n        .then((res) => {\n          this.response = res.data.data;\n        })\n        .catch((error) => {\n          // eslint-disable-next-line\n          console.error(error);\n          // call again if fail? why?\n          this.getTech();\n        });\n    },\n    // eslint-disable-next-line\n    removeEntry(tech_id) {\n      const path = this.delete_tech_path; // eslint-disable-line\n      const payload = { technology_id: tech_id };\n      axios.put(path, payload)\n        .then((response) => {\n          if (response.data.status === 500) {\n            this.$vs.notify({title:'Cannot delete entry',text:'This entries technology name used in child table.',color:'danger'})\n          } else {\n            this.response = response.data.data;\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n          // call again if fail? why?\n          this.getTech();\n        });\n    },\n    onDeleteEntry(entry) {\n      this.removeEntry(entry.technology_id);\n    },\n  },\n  created() {\n    this.getTech();\n  },\n  watch: {\n    response: {\n      handler() {\n        localStorage.setItem('tech_response', JSON.stringify(this.response));\n      },\n    },\n  },\n};\n",{"version":3,"sources":["TechMasterTables.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"TechMasterTables.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n      <vs-button @click='activePrompt = true' color='primary' type='border'>\n        New\n      </vs-button>\n      <vs-table :data='response'>\n        <template slot='header'>\n        <h3>\n          Tech Master\n        </h3>\n      </template>\n      <template slot ='thead'>\n        <vs-th>\n          Id\n        </vs-th>\n        <vs-th>\n          Name\n        </vs-th>\n        <vs-th>\n          Tags\n        </vs-th>\n        <vs-th>\n          Description\n        </vs-th>\n        <vs-th>\n          Actions\n        </vs-th>\n      </template>\n\n      <template slot-scope='{data}'>\n        <vs-tr :key='index' v-for='(entry, index) in data'>\n          <vs-td :data='data[index].technology_id'>\n            {{data[index].technology_id}}\n          </vs-td>\n          <vs-td :data='data[index].technology_name'>\n            {{data[index].technology_name}}\n          </vs-td>\n          <vs-td :data='data[index].tech_dependant_tags'>\n            {{data[index].technology_name}}\n          </vs-td>\n          <vs-td :data='data[index].stack_description'>\n            {{data[index].stack_description}}\n          </vs-td>\n          <vs-td>\n            <vs-button icon='edit' size='small' @click='editTech(data[index])'></vs-button>\n            <vs-button icon='delete' color='danger' size='small' @click='onDeleteEntry(data[index])'></vs-button>\n          </vs-td>\n\n        </vs-tr>\n      </template>\n      </vs-table>\n      <vs-prompt\n      title='New entry'\n      :active.sync='activePrompt'\n      :is-valid='validAddPrompt'\n      @accept='onSubmit'>\n        <vs-input label='Name' placeholder ='Name' v-model='addForm.name'\n          :success='nameSucc' success-text='Valid name.'\n          :danger='nameError' danger-text='Name must be nonempty and be no more than 50 characters.'/>\n        <vs-input label='Tags' placeholder ='Tags' v-model='addForm.tags'\n          :success='tagSucc' success-text='Valid tag.'\n          :danger='tagError' danger-text='Tags must begin with a \"#\".'/>\n        <vs-input label='Description' placeholder ='Description' v-model='addForm.description'\n          :success='descriptionSucc' success-text='Valid description.'\n          :danger='descriptionError' danger-text='Description must be nonempty and be no more than 500 characters.'/>\n      </vs-prompt>\n      <vs-prompt\n      title='Edit entry'\n      :active.sync='editPrompt'\n      @accept='onSubmitUpdate'>\n        <vs-input label='Name' v-model='editForm.name'\n        :success='nameSucc' success-text='Valid name.'\n        :danger='nameError' danger-text='Name must be nonempty and be no more than 50 characters.'/>\n        <vs-input label='Tags' v-model='editForm.tags'\n        :success='tagSucc' success-text='Valid tag.'\n        :danger='tagError' danger-text='Tags must begin with a \"#\".'/>\n        <vs-input label='Description' v-model='editForm.description'\n        :success='descriptionSucc' success-text='Valid description.'\n        :danger='descriptionError' danger-text='Description must be nonempty and be no more than 500 characters.'/>\n      </vs-prompt>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport PathMixins from '../mixins/pathMixins';\n\nexport default {\n  mixins: [PathMixins],\n\n  data() {\n    return {\n      activePrompt: false,\n      editPrompt: false,\n      nameError: true,\n      tagError: true,\n      descriptionError: true,\n      nameSucc: false,\n      tagSucc: false,\n      descriptionSucc: false,\n      response: [],\n      addForm: {\n        name: '',\n        tags: '',\n        description: '',\n      },\n      editForm: {\n        technology_id: null,\n        technology_name: '',\n        tech_dependant_tags: '',\n        stack_description: '',\n      },\n      message: 'Cannot delete entry, technology name used in child table.',\n    };\n  },\n  computed:{\n    validAddPrompt(){\n      if(this.addForm.name.length > 0 && this.addForm.name.length < 50) {\n        this.nameSucc = true;\n        this.nameError = false;\n      } else {\n        this.nameError = true;\n        this.nameSucc = false;\n      }\n      if(this.isValidTag(this.addForm.tags) && this.addForm.tags.length < 2000) {\n        this.tagSucc = true;\n        this.tagError = false;\n      } else {\n        this.tagError = true;\n        this.tagSucc = false;\n      }\n      if(this.addForm.description.length > 0 && this.addForm.description.length < 500) {\n        this.descriptionSucc = true;\n        this.descriptionError = false;\n      } else {\n        this.descriptionError = true;\n        this.descriptionSucc = false;\n      }\n      if(this.descriptionSucc && this.nameSucc && this.tagSucc) {\n        return true;\n      } else {\n        return false;\n      }\n    }, //eofunction\n    validEditPrompt(){\n      if(this.editForm.technology_name.length > 0 && this.editForm.technology_name.length < 50) {\n        this.nameSucc = true;\n        this.nameError = false;\n      } else {\n        this.nameSucc = false;\n        this.nameError = true;\n      }\n      if(this.descriptionSucc && this.nameSucc && this.tagSucc) {\n        return true;\n      }\n      return false;\n\n    }, //eofunction\n  },\n  methods: {\n    isValidTag(tag) {\n      let re = new RegExp('(([\\#])([A-z])+(\\,)*)+');\n      if (tag === '') {\n        return false;\n      }\n      return re.test(tag);\n    },\n    getTech() {\n      const path = this.get_tech_path;\n      axios.get(path)\n        .then((res) => {\n          this.response = res.data.data;\n        })\n        .catch((error) => {\n          // eslint-disable-next-line\n          console.error(error);\n        });\n    },\n    addTech(payload) {\n      const path = this.add_tech_path;\n      axios.post(path, payload)\n        .then((res) => {\n          this.response = res.data.data;\n        })\n        .catch((error) => {\n          console.log(error);\n          this.getTech();\n        });\n    },\n    onSubmit() {\n\n      const payload = {\n        technology_name: this.addForm.name,\n        tech_dependant_tags: this.addForm.tags,\n        stack_description: this.addForm.description,\n      };\n      console.log(payload);\n      this.addTech(payload);\n    },\n    editTech(entry) {\n      this.editPrompt = true;\n      //this.editForm = entry;\n      this.editForm = Object.assign({}, entry);\n    },\n    onSubmitUpdate() {\n      const payload = {\n        technology_id: this.editForm.technology_id,\n        technology_name: this.editForm.name,\n        tech_dependant_tags: this.editForm.tags,\n        stack_description: this.editForm.description,\n      };\n      this.updateTech(payload);\n    },\n    // eslint-disable-next-line\n    updateTech(payload, tech_id) {\n\n      const path = this.update_tech_path; // eslint-disable-line\n      axios.put(path, payload)\n        .then((res) => {\n          this.response = res.data.data;\n        })\n        .catch((error) => {\n          // eslint-disable-next-line\n          console.error(error);\n          // call again if fail? why?\n          this.getTech();\n        });\n    },\n    // eslint-disable-next-line\n    removeEntry(tech_id) {\n      const path = this.delete_tech_path; // eslint-disable-line\n      const payload = { technology_id: tech_id };\n      axios.put(path, payload)\n        .then((response) => {\n          if (response.data.status === 500) {\n            this.$vs.notify({title:'Cannot delete entry',text:'This entries technology name used in child table.',color:'danger'})\n          } else {\n            this.response = response.data.data;\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n          // call again if fail? why?\n          this.getTech();\n        });\n    },\n    onDeleteEntry(entry) {\n      this.removeEntry(entry.technology_id);\n    },\n  },\n  created() {\n    this.getTech();\n  },\n  watch: {\n    response: {\n      handler() {\n        localStorage.setItem('tech_response', JSON.stringify(this.response));\n      },\n    },\n  },\n};\n</script>\n"]}]}